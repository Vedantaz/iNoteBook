{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mulev\\\\Desktop\\\\Custom OfficeWorks\\\\designer_Way\\\\iNotebook_RP\\\\inotebook\\\\src\\\\context\\\\notes\\\\notesState.js\",\n    _s = $RefreshSig$();\n\nimport NoteContext from \"./notesContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); // Add a Note\n  // Add a Note\n\n  const addNote = async (title, description, tag) => {\n    // TODO: API Call\n    // API Call \n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjEzMWRjNWUzZTQwMzdjZDQ3MzRhMDY2In0sImlhdCI6MTYzMDY2OTU5Nn0.hJS0hx6I7ROugkqjL2CjrJuefA3pJi-IU5yGUbRHI4Q\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    console.log(\"Adding a new note\");\n    const note = {\n      \"_id\": \"61322f119553781a8ca8d0e08\",\n      \"user\": \"6131dc5e3e4037cd4734a0664\",\n      \"title\": title,\n      \"description\": description,\n      \"tag\": tag,\n      \"date\": \"2021-09-03T14:20:09.668Z\",\n      \"__v\": 0\n    };\n    setNotes(notes.concat(note));\n  }; // Delete a Note\n\n\n  const deleteNote = id => {\n    // TODO: API Call\n    console.log('deleting the note with id.' + id);\n    const newNotes = notes.filter(notes => {\n      return notes._id != id;\n    }); // notes renew kro ek condition ke sath.\n\n    setNotes(newNotes);\n  }; // Edit a Note\n\n\n  const editNote = async (id, title, description, tag) => {\n    // API Call \n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjEzMWRjNWUzZTQwMzdjZDQ3MzRhMDY2In0sImlhdCI6MTYzMDY2OTU5Nn0.hJS0hx6I7ROugkqjL2CjrJuefA3pJi-IU5yGUbRHI4Q\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    }); // Logic to edit in client\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      } // get all notes \n\n    }\n\n    ;\n\n    const getNotes = async () => {\n      // API Call \n      const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFmMmJjNWQzNzVlOTU1YTg5ZmZkN2FhIn0sImlhdCI6MTY0MzM0NTIxMH0.o0AMlGiPvOLX0WbmEqD_rOUcGGYALnV0fvO5G9vbah0\"\n        }\n      });\n      const json = await response.json();\n      console.log(json);\n      setNotes(json);\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["C:/Users/mulev/Desktop/Custom OfficeWorks/designer_Way/iNotebook_RP/inotebook/src/context/notes/notesState.js"],"names":["NoteContext","useState","NoteState","props","host","notesInitial","notes","setNotes","addNote","title","description","tag","response","fetch","method","headers","body","JSON","stringify","console","log","note","concat","deleteNote","id","newNotes","filter","_id","editNote","index","length","element","getNotes","json","children"],"mappings":"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","sourcesContent":["import NoteContext from \"./notesContext\";\r\nimport { useState } from \"react\";\r\nconst NoteState = (props) => {\r\n    const host = \"http://localhost:5000\";\r\n    const notesInitial = [];\r\n    const [notes, setNotes] = useState(notesInitial)\r\n    // Add a Note\r\n    // Add a Note\r\n    const addNote = async (title, description, tag) => {\r\n        // TODO: API Call\r\n        // API Call \r\n        const response = await fetch(`${host}/api/notes/addnote`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjEzMWRjNWUzZTQwMzdjZDQ3MzRhMDY2In0sImlhdCI6MTYzMDY2OTU5Nn0.hJS0hx6I7ROugkqjL2CjrJuefA3pJi-IU5yGUbRHI4Q\"\r\n            },\r\n            body: JSON.stringify({ title, description, tag })\r\n        });\r\n        console.log(\"Adding a new note\")\r\n        const note = {\r\n            \"_id\": \"61322f119553781a8ca8d0e08\",\r\n            \"user\": \"6131dc5e3e4037cd4734a0664\",\r\n            \"title\": title,\r\n            \"description\": description,\r\n            \"tag\": tag,\r\n            \"date\": \"2021-09-03T14:20:09.668Z\",\r\n            \"__v\": 0\r\n        };\r\n        setNotes(notes.concat(note))\r\n    }\r\n    // Delete a Note\r\n    const deleteNote = (id) => {\r\n        // TODO: API Call\r\n        console.log('deleting the note with id.' + id);\r\n        const newNotes = notes.filter((notes) => { return notes._id != id }); // notes renew kro ek condition ke sath.\r\n        setNotes(newNotes);\r\n    }\r\n    // Edit a Note\r\n    const editNote = async (id, title, description, tag) => {\r\n        // API Call \r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjEzMWRjNWUzZTQwMzdjZDQ3MzRhMDY2In0sImlhdCI6MTYzMDY2OTU5Nn0.hJS0hx6I7ROugkqjL2CjrJuefA3pJi-IU5yGUbRHI4Q\"\r\n            },\r\n            body: JSON.stringify({ title, description, tag })\r\n        });\r\n        // Logic to edit in client\r\n        for (let index = 0; index < notes.length; index++) {\r\n            const element = notes[index];\r\n            if (element._id === id) {\r\n                element.title = title;\r\n                element.description = description;\r\n                element.tag = tag;\r\n            }\r\n            // get all notes \r\n        };\r\n        const getNotes = async () => {\r\n            // API Call \r\n            const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFmMmJjNWQzNzVlOTU1YTg5ZmZkN2FhIn0sImlhdCI6MTY0MzM0NTIxMH0.o0AMlGiPvOLX0WbmEqD_rOUcGGYALnV0fvO5G9vbah0\"\r\n                }\r\n            });\r\n            const json = await response.json()\r\n            console.log(json)\r\n            setNotes(json)\r\n        }\r\n    }\r\n    return (\r\n        <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNotes }}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\nexport default NoteState;"]},"metadata":{},"sourceType":"module"}