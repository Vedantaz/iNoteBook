{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mulev\\\\Desktop\\\\Custom OfficeWorks\\\\designer_Way\\\\iNotebook_RP\\\\inotebook\\\\src\\\\context\\\\notes\\\\notesState.js\",\n    _s = $RefreshSig$();\n\nimport NoteContext from \"./notesContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); // Get all notes \n\n  const getNotes = async () => {\n    // API Call \n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFmMmJjNWQzNzVlOTU1YTg5ZmZkN2FhIn0sImlhdCI6MTY0MzM0NTIxMH0.o0AMlGiPvOLX0WbmEqD_rOUcGGYALnV0fvO5G9vbah0\"\n      }\n    });\n    const Json = await response.json();\n    setNotes(Json);\n  }; // Add a Note\n\n\n  const addNote = async (title, description, tag) => {\n    // TODO: API Call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFmMmJjNWQzNzVlOTU1YTg5ZmZkN2FhIn0sImlhdCI6MTY0MzM0NTIxMH0.o0AMlGiPvOLX0WbmEqD_rOUcGGYALnV0fvO5G9vbah0\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    console.log('Adding a new note.');\n    const note = {\n      \"_id\": \"61322f119553781a8ca8d0e08\",\n      \"user\": \"6131dc5e3e4037cd4734a0664\",\n      \"title\": title,\n      \"description\": description,\n      \"tag\": tag,\n      \"date\": \"2021-09-03T14:20:09.668Z\",\n      \"__v\": 0\n    };\n    setNotes(notes.concat(note)); // after adding the note , clear the title , text, tag.\n  }; // Delete a Note\n\n\n  const deleteNote = async id => {\n    // TODO: API Call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFmMmJjNWQzNzVlOTU1YTg5ZmZkN2FhIn0sImlhdCI6MTY0MzM0NTIxMH0.o0AMlGiPvOLX0WbmEqD_rOUcGGYALnV0fvO5G9vbah0\"\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    console.log('deleting the note with id.' + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    }); // notes renew kro ek condition ke sath.\n\n    setNotes(newNotes);\n  }; // Edit a Note\n\n\n  const updateNote = async (id, title, description, tag) => {\n    // API Call \n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFmMmJjNWQzNzVlOTU1YTg5ZmZkN2FhIn0sImlhdCI6MTY0MzM0NTIxMH0.o0AMlGiPvOLX0WbmEqD_rOUcGGYALnV0fvO5G9vbah0\"\n      },\n      body: JSON.stringify({\n        id,\n        title,\n        description,\n        tag\n      })\n    });\n    const Json = await response.json();\n    console.log(Json); // Logic to edit in client\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      updateNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["C:/Users/mulev/Desktop/Custom OfficeWorks/designer_Way/iNotebook_RP/inotebook/src/context/notes/notesState.js"],"names":["NoteContext","useState","NoteState","props","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","Json","json","addNote","title","description","tag","body","JSON","stringify","console","log","note","concat","deleteNote","id","newNotes","filter","_id","updateNote","index","length","element","children"],"mappings":"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","sourcesContent":["import NoteContext from \"./notesContext\";\r\nimport { useState } from \"react\";\r\nconst NoteState = (props) => {\r\n    const host = \"http://localhost:5000\";\r\n    const notesInitial = [];\r\n    const [notes, setNotes] = useState(notesInitial)\r\n    // Get all notes \r\n    const getNotes = async () => {\r\n        // API Call \r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFmMmJjNWQzNzVlOTU1YTg5ZmZkN2FhIn0sImlhdCI6MTY0MzM0NTIxMH0.o0AMlGiPvOLX0WbmEqD_rOUcGGYALnV0fvO5G9vbah0\"\r\n            }\r\n        });\r\n        const Json = await response.json()\r\n        setNotes(Json);\r\n    }\r\n    // Add a Note\r\n    const addNote = async (title, description, tag) => {\r\n        // TODO: API Call\r\n        const response = await fetch(`${host}/api/notes/addnote`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFmMmJjNWQzNzVlOTU1YTg5ZmZkN2FhIn0sImlhdCI6MTY0MzM0NTIxMH0.o0AMlGiPvOLX0WbmEqD_rOUcGGYALnV0fvO5G9vbah0\"\r\n            },\r\n            body: JSON.stringify({ title, description, tag })\r\n        });\r\n        const json = await response.json();\r\n        console.log(json);\r\n\r\n        console.log('Adding a new note.');\r\n        const note = {\r\n            \"_id\": \"61322f119553781a8ca8d0e08\",\r\n            \"user\": \"6131dc5e3e4037cd4734a0664\",\r\n            \"title\": title,\r\n            \"description\": description,\r\n            \"tag\": tag,\r\n            \"date\": \"2021-09-03T14:20:09.668Z\",\r\n            \"__v\": 0\r\n        };\r\n        setNotes(notes.concat(note));\r\n        // after adding the note , clear the title , text, tag.\r\n\r\n    }\r\n    // Delete a Note\r\n    const deleteNote = async (id) => {\r\n        // TODO: API Call\r\n        const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFmMmJjNWQzNzVlOTU1YTg5ZmZkN2FhIn0sImlhdCI6MTY0MzM0NTIxMH0.o0AMlGiPvOLX0WbmEqD_rOUcGGYALnV0fvO5G9vbah0\"\r\n            }\r\n        });\r\n        const json = await response.json();\r\n        console.log(json);\r\n\r\n        console.log('deleting the note with id.' + id);\r\n        const newNotes = notes.filter((note) => { return note._id !== id }); // notes renew kro ek condition ke sath.\r\n        setNotes(newNotes);\r\n    }\r\n    // Edit a Note\r\n    const updateNote = async (id, title, description, tag) => {\r\n        // API Call \r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFmMmJjNWQzNzVlOTU1YTg5ZmZkN2FhIn0sImlhdCI6MTY0MzM0NTIxMH0.o0AMlGiPvOLX0WbmEqD_rOUcGGYALnV0fvO5G9vbah0\"\r\n            },\r\n\r\n            body: JSON.stringify({ id, title, description, tag })\r\n        });\r\n        const Json = await response.json();\r\n        console.log(Json);\r\n\r\n        // Logic to edit in client\r\n        for (let index = 0; index < notes.length; index++) {\r\n            const element = notes[index];\r\n            if (element._id === id) {\r\n                element.title = title;\r\n                element.description = description;\r\n                element.tag = tag;\r\n            }\r\n        };\r\n    }\r\n    return (\r\n        <NoteContext.Provider value={{ notes, addNote, deleteNote, updateNote, getNotes }}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\nexport default NoteState;"]},"metadata":{},"sourceType":"module"}